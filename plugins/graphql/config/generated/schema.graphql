type Cart {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  totalprice: String
  checkedout: Boolean
  user: UsersPermissionsUser
}

type CartAggregator {
  count: Int
}

type CartConnection {
  values: [Cart]
  groupBy: CartGroupBy
  aggregate: CartAggregator
}

type CartConnection_id {
  key: ID
  connection: CartConnection
}

type CartConnectionCheckedout {
  key: Boolean
  connection: CartConnection
}

type CartConnectionCreatedAt {
  key: DateTime
  connection: CartConnection
}

type CartConnectionTotalprice {
  key: String
  connection: CartConnection
}

type CartConnectionUpdatedAt {
  key: DateTime
  connection: CartConnection
}

type CartConnectionUser {
  key: ID
  connection: CartConnection
}

type CartGroupBy {
  _id: [CartConnection_id]
  createdAt: [CartConnectionCreatedAt]
  updatedAt: [CartConnectionUpdatedAt]
  totalprice: [CartConnectionTotalprice]
  checkedout: [CartConnectionCheckedout]
  user: [CartConnectionUser]
}

input CartInput {
  totalprice: String
  checkedout: Boolean
  user: ID
}

type Category {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  picture: String
  items(sort: String, limit: Int, start: Int, where: JSON): [Item]
}

type CategoryAggregator {
  count: Int
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryConnection_id {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreatedAt {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionName {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionPicture {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionUpdatedAt {
  key: DateTime
  connection: CategoryConnection
}

type CategoryGroupBy {
  _id: [CategoryConnection_id]
  createdAt: [CategoryConnectionCreatedAt]
  updatedAt: [CategoryConnectionUpdatedAt]
  name: [CategoryConnectionName]
  picture: [CategoryConnectionPicture]
}

input CategoryInput {
  name: String
  picture: String
  items: [ID]
}

input createCartInput {
  data: CartInput
}

type createCartPayload {
  cart: Cart
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input createDepartmentInput {
  data: DepartmentInput
}

type createDepartmentPayload {
  department: Department
}

input createItemInput {
  data: ItemInput
}

type createItemPayload {
  item: Item
}

input createRecieptInput {
  data: RecieptInput
}

type createRecieptPayload {
  reciept: Reciept
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteCartInput {
  where: InputID
}

type deleteCartPayload {
  cart: Cart
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

input deleteDepartmentInput {
  where: InputID
}

type deleteDepartmentPayload {
  department: Department
}

input deleteItemInput {
  where: InputID
}

type deleteItemPayload {
  item: Item
}

input deleteRecieptInput {
  where: InputID
}

type deleteRecieptPayload {
  reciept: Reciept
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type Department {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  picture: String
  items(sort: String, limit: Int, start: Int, where: JSON): [Item]
}

type DepartmentAggregator {
  count: Int
}

type DepartmentConnection {
  values: [Department]
  groupBy: DepartmentGroupBy
  aggregate: DepartmentAggregator
}

type DepartmentConnection_id {
  key: ID
  connection: DepartmentConnection
}

type DepartmentConnectionCreatedAt {
  key: DateTime
  connection: DepartmentConnection
}

type DepartmentConnectionName {
  key: String
  connection: DepartmentConnection
}

type DepartmentConnectionPicture {
  key: String
  connection: DepartmentConnection
}

type DepartmentConnectionUpdatedAt {
  key: DateTime
  connection: DepartmentConnection
}

type DepartmentGroupBy {
  _id: [DepartmentConnection_id]
  createdAt: [DepartmentConnectionCreatedAt]
  updatedAt: [DepartmentConnectionUpdatedAt]
  name: [DepartmentConnectionName]
  picture: [DepartmentConnectionPicture]
}

input DepartmentInput {
  name: String
  picture: String
  items: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

input InputID {
  id: ID!
}

type Item {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  price: String
  discount: String
  brand: String
  picture: String
  cat: Category
  dep: Department
}

type ItemAggregator {
  count: Int
}

type ItemConnection {
  values: [Item]
  groupBy: ItemGroupBy
  aggregate: ItemAggregator
}

type ItemConnection_id {
  key: ID
  connection: ItemConnection
}

type ItemConnectionBrand {
  key: String
  connection: ItemConnection
}

type ItemConnectionCat {
  key: ID
  connection: ItemConnection
}

type ItemConnectionCreatedAt {
  key: DateTime
  connection: ItemConnection
}

type ItemConnectionDep {
  key: ID
  connection: ItemConnection
}

type ItemConnectionDescription {
  key: String
  connection: ItemConnection
}

type ItemConnectionDiscount {
  key: String
  connection: ItemConnection
}

type ItemConnectionName {
  key: String
  connection: ItemConnection
}

type ItemConnectionPicture {
  key: String
  connection: ItemConnection
}

type ItemConnectionPrice {
  key: String
  connection: ItemConnection
}

type ItemConnectionUpdatedAt {
  key: DateTime
  connection: ItemConnection
}

type ItemGroupBy {
  _id: [ItemConnection_id]
  createdAt: [ItemConnectionCreatedAt]
  updatedAt: [ItemConnectionUpdatedAt]
  name: [ItemConnectionName]
  description: [ItemConnectionDescription]
  price: [ItemConnectionPrice]
  discount: [ItemConnectionDiscount]
  brand: [ItemConnectionBrand]
  picture: [ItemConnectionPicture]
  cat: [ItemConnectionCat]
  dep: [ItemConnectionDep]
}

input ItemInput {
  name: String
  description: String
  price: String
  discount: String
  brand: String
  picture: String
  cat: ID
  dep: ID
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Cart | createCartPayload | updateCartPayload | deleteCartPayload | CartConnection | CartAggregator | CartGroupBy | CartConnection_id | CartConnectionCreatedAt | CartConnectionUpdatedAt | CartConnectionTotalprice | CartConnectionCheckedout | CartConnectionUser | Category | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnection_id | CategoryConnectionCreatedAt | CategoryConnectionUpdatedAt | CategoryConnectionName | CategoryConnectionPicture | Department | createDepartmentPayload | updateDepartmentPayload | deleteDepartmentPayload | DepartmentConnection | DepartmentAggregator | DepartmentGroupBy | DepartmentConnection_id | DepartmentConnectionCreatedAt | DepartmentConnectionUpdatedAt | DepartmentConnectionName | DepartmentConnectionPicture | Item | createItemPayload | updateItemPayload | deleteItemPayload | ItemConnection | ItemAggregator | ItemGroupBy | ItemConnection_id | ItemConnectionCreatedAt | ItemConnectionUpdatedAt | ItemConnectionName | ItemConnectionDescription | ItemConnectionPrice | ItemConnectionDiscount | ItemConnectionBrand | ItemConnectionPicture | ItemConnectionCat | ItemConnectionDep | Reciept | createRecieptPayload | updateRecieptPayload | deleteRecieptPayload | RecieptConnection | RecieptAggregator | RecieptGroupBy | RecieptConnection_id | RecieptConnectionCreatedAt | RecieptConnectionUpdatedAt | RecieptConnectionDate | RecieptConnectionDescription | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionFirstName | UsersPermissionsUserConnectionLastName | UsersPermissionsUserConnectionDateOfBirth | UsersPermissionsUserConnectionCart

type Mutation {
  createCart(input: createCartInput): createCartPayload
  updateCart(input: updateCartInput): updateCartPayload
  deleteCart(input: deleteCartInput): deleteCartPayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createDepartment(input: createDepartmentInput): createDepartmentPayload
  updateDepartment(input: updateDepartmentInput): updateDepartmentPayload
  deleteDepartment(input: deleteDepartmentInput): deleteDepartmentPayload
  createItem(input: createItemInput): createItemPayload
  updateItem(input: updateItemInput): updateItemPayload
  deleteItem(input: deleteItemInput): deleteItemPayload
  createReciept(input: createRecieptInput): createRecieptPayload
  updateReciept(input: updateRecieptInput): updateRecieptPayload
  deleteReciept(input: deleteRecieptInput): deleteRecieptPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  cart(id: ID!): Cart
  carts(sort: String, limit: Int, start: Int, where: JSON): [Cart]
  cartsConnection(sort: String, limit: Int, start: Int, where: JSON): CartConnection
  category(id: ID!): Category
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category]
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON): CategoryConnection
  department(id: ID!): Department
  departments(sort: String, limit: Int, start: Int, where: JSON): [Department]
  departmentsConnection(sort: String, limit: Int, start: Int, where: JSON): DepartmentConnection
  item(id: ID!): Item
  items(sort: String, limit: Int, start: Int, where: JSON): [Item]
  itemsConnection(sort: String, limit: Int, start: Int, where: JSON): ItemConnection
  reciept(id: ID!): Reciept
  reciepts(sort: String, limit: Int, start: Int, where: JSON): [Reciept]
  recieptsConnection(sort: String, limit: Int, start: Int, where: JSON): RecieptConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

type Reciept {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  date: DateTime
  description: String
}

type RecieptAggregator {
  count: Int
}

type RecieptConnection {
  values: [Reciept]
  groupBy: RecieptGroupBy
  aggregate: RecieptAggregator
}

type RecieptConnection_id {
  key: ID
  connection: RecieptConnection
}

type RecieptConnectionCreatedAt {
  key: DateTime
  connection: RecieptConnection
}

type RecieptConnectionDate {
  key: DateTime
  connection: RecieptConnection
}

type RecieptConnectionDescription {
  key: String
  connection: RecieptConnection
}

type RecieptConnectionUpdatedAt {
  key: DateTime
  connection: RecieptConnection
}

type RecieptGroupBy {
  _id: [RecieptConnection_id]
  createdAt: [RecieptConnectionCreatedAt]
  updatedAt: [RecieptConnectionUpdatedAt]
  date: [RecieptConnectionDate]
  description: [RecieptConnectionDescription]
}

input RecieptInput {
  date: DateTime
  description: String
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateCartInput {
  where: InputID
  data: CartInput
}

type updateCartPayload {
  cart: Cart
}

input updateCategoryInput {
  where: InputID
  data: CategoryInput
}

type updateCategoryPayload {
  category: Category
}

input updateDepartmentInput {
  where: InputID
  data: DepartmentInput
}

type updateDepartmentPayload {
  department: Department
}

input updateItemInput {
  where: InputID
  data: ItemInput
}

type updateItemPayload {
  item: Item
}

input updateRecieptInput {
  where: InputID
  data: RecieptInput
}

type updateRecieptPayload {
  reciept: Reciept
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

input UserInput {
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: ID
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  cart: ID
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

"""This prepresent User Model"""
type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  firstName: String
  lastName: String
  dateOfBirth: DateTime
  cart: Cart
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCart {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionDateOfBirth {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionFirstName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionLastName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  firstName: [UsersPermissionsUserConnectionFirstName]
  lastName: [UsersPermissionsUserConnectionLastName]
  dateOfBirth: [UsersPermissionsUserConnectionDateOfBirth]
  cart: [UsersPermissionsUserConnectionCart]
}
